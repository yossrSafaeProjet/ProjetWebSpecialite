<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ma Page</title>
    <link rel="stylesheet" href="Dashborad.css">
    <link rel="stylesheet" href="popup.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">


</head>
<body>
    <div class="sidebar">
        <button onclick="afficherPopup()">Ajouter un produit</button>
        <button onclick="seDeconnecter()">Se déconnecter</button>
    </div>
    <div class="content">
        <!-- Votre contenu principal ici -->
    </div>

    <div class="popup" id="popup">
        <span class="close" onclick="fermerPopup()">&times;</span>
        <span id="popupTitle" class="popup-title">Ajouter un produit</span>
        <form action="/addProduct" method="post" id="productForm">
            <label for="libelle">Libellé:</label><br>
            <input type="text" id="libelle" name="libelle" value required><br>
            <label for="description">Description:</label><br>
            <textarea id="description" name="description" required></textarea><br>
            <label for="images">Images:</label><br>
            <input type="text" id="images" name="images" required><br>
            <label for="prix">Prix:</label><br>
            <input type="number" id="prix" name="prix" required><br>
            <label for="categorie">Catégorie:</label><br>
            <input type="text" id="categorie" name="categorie" required><br>
            <input type="submit" id="submitButton" value="Ajouter">
        </form>
    </div>
    <div class="content">
    <div id="productList" class="product-list" style="display: none;">
        <h2>Liste des produits</h2>
    </div>
    </div>
    <script>
        function afficherPopup() {
            var popup = document.getElementById("popup");
            popup.style.display = "block";
        }

        function seDeconnecter() {
            // Ajouter votre logique de déconnexion ici
            alert("Fonctionnalité Se déconnecter non implémentée");
        }
        function fermerPopup() {
    var popup = document.getElementById("popup");
    popup.style.display = "none";
}
        document.getElementById('productForm').addEventListener('submit', async function(event) {
            event.preventDefault(); // Empêche l'envoi du formulaire
             // Récupère les données du formulaire
            const libelle = document.getElementById('libelle').value;
            const description = document.getElementById('description').value;
            const images = document.getElementById('images').value;
            const prix = document.getElementById('prix').value;
            const categorie = document.getElementById('categorie').value;
            fetch('http://localhost:5000/addProduct', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json',
            },
                body: JSON.stringify({libelle,images,description,categorie,prix }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur lors de la requête');
                }
                return response.json();
            })
            .then(data => {
                var popup = document.getElementById("popup");
                popup.style.display = "none";
                // Actualiser la liste des produits
                fetchAndDisplayProducts();
            })
            .catch(error => {
                console.error('Erreur:', error);
                // Gère les erreurs, par exemple afficher un message d'erreur à l'utilisateur
            });
        });

        async function fetchAndDisplayProducts() {
            try {
                const response = await fetch('http://localhost:5000/AllProduit');
                if (response.ok) {
                    const responseData = await response.json();
                    const productList = document.getElementById('productList');
                    if (responseData.produits.length > 0) {
                        productList.style.display = 'block';
                        
                        responseData.produits.forEach(product => {
                           const  productId=product.id;
                            if (!document.getElementById('product_' + productId)) {
    // Création de l'élément de la carte

    const cardElement = document.createElement('div');
    cardElement.id='product_'+productId;
    cardElement.classList.add('card'); // Ajout de la classe pour la mise en forme CSS
    
    // Image du produit
    const imageElement = document.createElement('img');
    imageElement.src = product.images;
    imageElement.alt = product.libelle;
    cardElement.appendChild(imageElement);

    // Contenu de la carte
    const cardContent = document.createElement('div');
    cardContent.classList.add('card-content');

    // Libellé du produit
    const libelleElement = document.createElement('h3');
    libelleElement.textContent = 'Libelle: '+product.libelle;
    cardContent.appendChild(libelleElement);

    // Description du produit
const descriptionElement = document.createElement('p');
descriptionElement.textContent = 'Description: ' + product.description;
cardContent.appendChild(descriptionElement);

// Prix du produit
const prixElement = document.createElement('p');
prixElement.textContent = 'Prix: ' + product.prix + ' £';
cardContent.appendChild(prixElement);

// Catégorie du produit
const categorieElement = document.createElement('p');
categorieElement.textContent = 'Catégorie: ' + product.categorie;
cardContent.appendChild(categorieElement);
const deleteIcon = document.createElement('span');
deleteIcon.innerHTML = '<i class="fas fa-trash-alt"></i>'; // Vous pouvez remplacer cela par une classe d'icône ou utiliser Font Awesome
deleteIcon.classList.add('delete-icon');
deleteIcon.onclick = function() {

    deleteProduct(productId); // Appeler la fonction de suppression avec l'ID du produit en paramètre
};
cardElement.appendChild(deleteIcon);

// Ajouter l'icône de modification
const editIcon = document.createElement('span');
editIcon.innerHTML = '<i class="fas fa-edit"></i>'; // Vous pouvez remplacer cela par une classe d'icône ou utiliser Font Awesome
editIcon.classList.add('edit-icon');
editIcon.onclick = function() {
    chargerProduit(productId); // Appeler la fonction de modification avec l'ID du produit en paramètre
};
cardElement.appendChild(editIcon);
// Ajout du contenu de la carte à la carte
cardElement.appendChild(cardContent);

// Ajout de la carte à la liste des produits
productList.appendChild(cardElement);
                    }});
                } else {
                    productList.style.display = 'none';
                }
            } else {
                console.error('Erreur lors de la récupération des produits');
            }
        } catch (error) {
            console.error('Erreur lors de la récupération des produits:', error);
        }
    }

    fetchAndDisplayProducts();
const popupTitle = document.getElementById('popupTitle');
const submitButton = document.getElementById('submitButton');

// Fonction pour configurer le mode (ajout ou modification)
function configureMode(mode) {
    if (mode === 'ajout') {
        popupTitle.textContent = 'Ajouter un produit';
        submitButton.value = 'Ajouter';
        
    } else if (mode === 'modification') {
        popupTitle.textContent = 'Modifier un produit';
        submitButton.value = 'Modifier';
    }
}

// Appel de la fonction avec le mode approprié
configureMode('ajout'); 
  async function  chargerProduit(productId){
    configureMode('modification');
    try {
        console.log(productId);
        const response = await fetch(`http://localhost:5000/product/${productId}`);
        const data = await response.json();
        // Remplissez les champs du formulaire avec les données récupérées
        document.getElementById('libelle').value = data.produit.libelle;
        document.getElementById('description').value = data.produit.description;
        document.getElementById('images').value = data.produit.images;
        document.getElementById('prix').value = data.produit.prix;
        document.getElementById('categorie').value = data.produit.categorie;

        // Assurez-vous que le formulaire est visible une fois les données chargées
        var popup = document.getElementById("popup");
                popup.style.display = "block";
                
                    const libelle = document.getElementById('libelle').value;
        
        
    } catch (error) {
        console.error('Erreur lors de la récupération des données du produit:', error);
        // Gérez l'erreur ici, par exemple, afficher un message d'erreur à l'utilisateur
    }
  }
async function deleteProduct(productId) {
const confirmDelete = confirm('Voulez-vous vraiment supprimer ce produit ?');

if (confirmDelete) {
    await deleleProducts(productId);
}
}

async function deleleProducts(productId) {

try {
    const response = await fetch(`http://localhost:5000/product/${productId}`, {
        method: 'DELETE',
    });

    if (response.ok) {
        // Mettez à jour la liste des publications après la suppression
        const productElement = document.getElementById(productId);
            if (productElement) {
                productElement.remove();
            }
    } else {
        console.error('Erreur lors de la suppression de la publication');
    }
} catch (error) {
    console.error('Erreur lors de la suppression de la publication :', error);
}
}

    </script>
</body>
</html>
